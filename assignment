## Caching the Inverse of a Matrix:
## The functions written below are as follows: 
## 1. makeCacheMatrix creates a special matrix which will cache its inverse for input of the second function
## 2. cacheSolve function calculates the inverse of the special matrix which is returned by the above function. It first checks to see if the
##inverse has already been calculated if so, then the cacheSolve retrives the inverse from cache.

makeCacheMatrix <- function(x = matrix()) {
	inverse<-NULL
	set<-function(y){
		x<<-y
		inverse<<-NULL
	}
	get <- function()x
	setInv <- function(matrixInv) inverse<<- matrixInv
	getInv <- function() inverse
	list(set = set, get = get,
                 setInv = setInv,
                 getInv = getInv)
}


## The cacheSolve function calculates the inverse of the special matrix which is returned by the above function. It first checks to see if the
##inverse has already been calculated. If so, then the cacheSolve retrives the inverse from cache.

cacheSolve <- function(x, ...) {
        inverse <- x$getInv()
            if(!is.null(inverse)) {
                    message("getting cached data")
                    return(inverse)
            }
            data <- x$get()
            inverse <- solve(data, ...)
            x$setInv(inverse)
            inverse
}
